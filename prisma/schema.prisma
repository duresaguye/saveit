generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  links         Link[]
  folders       Folder[]
  linkShares    LinkShare[]
  sharedLinksTo LinkShare[] @relation("SharedLinkTo")
  folderShares  FolderShare[]
  sharedFoldersTo FolderShare[] @relation("SharedFolderTo")

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                Int
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Link {
  id          Int       @id @default(autoincrement())
  title       String
  url         String    @unique
  description String?   
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  user        User      @relation(fields: [userId], references: [id])

  // Relations
  folders     Folder[]  @relation("FolderLinks")
  tags        Tag[]     @relation("LinkTags")
  
  // For minimap relations
  relatedLinksFrom LinkRelation[]  @relation("LinkRelationsFrom")  
  relatedLinksTo   LinkRelation[]  @relation("LinkRelationsTo")   
  linkShares    LinkShare[]

  @@map("link")
}

model LinkRelation {
  id         Int       @id @default(autoincrement())
  fromLinkId Int
  toLinkId   Int
  createdAt  DateTime  @default(now())

  // Relations
  fromLink   Link      @relation("LinkRelationsFrom", fields: [fromLinkId], references: [id])
  toLink     Link      @relation("LinkRelationsTo", fields: [toLinkId], references: [id])

  @@unique([fromLinkId, toLinkId])

  @@map("link_relation")
}

model Folder {
  id          Int       @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  
  // Relations
  links       Link[]    @relation("FolderLinks")
  folderShares FolderShare[]

  @@map("folder")
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  links     Link[]    @relation("LinkTags")

  @@map("tag")
}

model LinkShare {
  id        Int       @id @default(autoincrement())
  linkId    Int
  userId    Int
  sharedWith Int      // The ID of the user with whom the link is shared
  permissions String  // Permissions like "read" or "write" could be stored here
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  link      Link      @relation(fields: [linkId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  sharedTo  User      @relation("SharedLinkTo", fields: [sharedWith], references: [id])

  @@map("link_share")
}

model FolderShare {
  id        Int       @id @default(autoincrement())
  folderId  Int
  userId    Int
  sharedWith Int      // The ID of the user with whom the folder is shared
  permissions String  // Permissions like "read" or "write"
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  folder    Folder    @relation(fields: [folderId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  sharedTo  User      @relation("SharedFolderTo", fields: [sharedWith], references: [id])

  @@map("folder_share")
}
